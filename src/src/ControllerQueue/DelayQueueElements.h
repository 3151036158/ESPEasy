#ifndef DELAY_QUEUE_ELEMENTS_H
#define DELAY_QUEUE_ELEMENTS_H


#include "../../ESPEasy_common.h"


#include "../ControllerQueue/ControllerDelayHandlerStruct.h"
#include "../ControllerQueue/Queue_element_base.h"


#include "../DataStructs/ControllerSettingsStruct.h"


// The most logical place to have these queue element handlers defined would be in their
// respective _Cxxx.ino file.
// But the PlatformIO/Arduino build process may then run into issues when compiling.
// Either some of the functions may not be (forward) declared yet when being called from the scheduler code.
// Or the forward declaration of a function may be generated by the pre-processor when expanding the macro to generate them.
// The #ifdef USES_Cxxx check is then no longer present in the generated ESPEasy.ino.cpp file which will lead to build errors
// when not all controllers are included in the build.
//
// To overcome build errors, one MUST forward declare the do_process_cXXX_delay_queue function in the .ino file of the controller itself.
// If someone finds a better way, please let me know.
// See: https://github.com/platformio/platformio-core/issues/2972
//
// N.B. These queue element classes should be defined as class (not a struct), to be used as template.
//
struct ControllerDelayHandlerStruct;

#if FEATURE_MQTT
# include "../ControllerQueue/MQTT_queue_element.h"
extern struct ControllerDelayHandlerStruct *MQTTDelayHandler;

bool init_mqtt_delay_queue(controllerIndex_t ControllerIndex,
                           String          & pubname,
                           bool            & retainFlag);
void exit_mqtt_delay_queue();
#endif // if FEATURE_MQTT


/*********************************************************************************************\
* C001_queue_element for queueing requests for C001.
\*********************************************************************************************/
#ifdef USES_C001
# include "../ControllerQueue/SimpleQueueElement_string_only.h"
typedef simple_queue_element_string_only C001_queue_element;

// DEFINE_Cxxx_DELAY_QUEUE_MACRO(00,  1)
extern struct ControllerDelayHandlerStruct *C001_DelayHandler;
bool do_process_c001_delay_queue(int                       controller_number,
                                 const C001_queue_element& element,
                                 ControllerSettingsStruct& ControllerSettings);
void process_c001_delay_queue();
bool init_c001_delay_queue(controllerIndex_t ControllerIndex);
void exit_c001_delay_queue();

#endif // ifdef USES_C001

/*********************************************************************************************\
* C003_queue_element for queueing requests for C003 Nodo Telnet.
\*********************************************************************************************/
#ifdef USES_C003
# include "../ControllerQueue/SimpleQueueElement_string_only.h"
typedef simple_queue_element_string_only C003_queue_element; 
//DEFINE_Cxxx_DELAY_QUEUE_MACRO(00, 3)
extern struct ControllerDelayHandlerStruct *C003_DelayHandler;
bool do_process_c003_delay_queue(int                       controller_number,
                                 const C003_queue_element& element,
                                 ControllerSettingsStruct& ControllerSettings);
void process_c003_delay_queue();
bool init_c003_delay_queue(controllerIndex_t ControllerIndex);
void exit_c003_delay_queue();

#endif // ifdef USES_C003

#ifdef USES_C004
# include "../ControllerQueue/SimpleQueueElement_formatted_Strings.h"
# define C004_queue_element SimpleQueueElement_formatted_Strings
//DEFINE_Cxxx_DELAY_QUEUE_MACRO(00, 4)
extern struct ControllerDelayHandlerStruct *C004_DelayHandler;
bool do_process_c004_delay_queue(int                       controller_number,
                                 const C004_queue_element& element,
                                 ControllerSettingsStruct& ControllerSettings);
void process_c004_delay_queue();
bool init_c004_delay_queue(controllerIndex_t ControllerIndex);
void exit_c004_delay_queue();

#endif // ifdef USES_C004

#ifdef USES_C007
# include "../ControllerQueue/SimpleQueueElement_formatted_Strings.h"
# define C007_queue_element SimpleQueueElement_formatted_Strings
//DEFINE_Cxxx_DELAY_QUEUE_MACRO(00, 7)
extern struct ControllerDelayHandlerStruct *C007_DelayHandler;
bool do_process_c007_delay_queue(int                       controller_number,
                                 const C007_queue_element& element,
                                 ControllerSettingsStruct& ControllerSettings);
void process_c007_delay_queue();
bool init_c007_delay_queue(controllerIndex_t ControllerIndex);
void exit_c007_delay_queue();

#endif // ifdef USES_C007


/*********************************************************************************************\
* C008_queue_element for queueing requests for 008: Generic HTTP
* Using SimpleQueueElement_formatted_Strings
\*********************************************************************************************/
#ifdef USES_C008
# include "../ControllerQueue/SimpleQueueElement_formatted_Strings.h"
# define C008_queue_element SimpleQueueElement_formatted_Strings
//DEFINE_Cxxx_DELAY_QUEUE_MACRO(00, 8)
extern struct ControllerDelayHandlerStruct *C008_DelayHandler;
bool do_process_c008_delay_queue(int                       controller_number,
                                 const C008_queue_element& element,
                                 ControllerSettingsStruct& ControllerSettings);
void process_c008_delay_queue();
bool init_c008_delay_queue(controllerIndex_t ControllerIndex);
void exit_c008_delay_queue();

#endif // ifdef USES_C008

#ifdef USES_C009
# include "../ControllerQueue/SimpleQueueElement_formatted_Strings.h"
# define C009_queue_element SimpleQueueElement_formatted_Strings
//DEFINE_Cxxx_DELAY_QUEUE_MACRO(00, 9)
extern struct ControllerDelayHandlerStruct *C009_DelayHandler;
bool do_process_c009_delay_queue(int                       controller_number,
                                 const C009_queue_element& element,
                                 ControllerSettingsStruct& ControllerSettings);
void process_c009_delay_queue();
bool init_c009_delay_queue(controllerIndex_t ControllerIndex);
void exit_c009_delay_queue();

#endif // ifdef USES_C009


/*********************************************************************************************\
* C010_queue_element for queueing requests for 010: Generic UDP
* Using SimpleQueueElement_formatted_Strings
\*********************************************************************************************/
#ifdef USES_C010
# include "../ControllerQueue/SimpleQueueElement_formatted_Strings.h"
# define C010_queue_element SimpleQueueElement_formatted_Strings
//DEFINE_Cxxx_DELAY_QUEUE_MACRO(0, 10)
extern struct ControllerDelayHandlerStruct *C010_DelayHandler;
bool do_process_c010_delay_queue(int                       controller_number,
                                 const C010_queue_element& element,
                                 ControllerSettingsStruct& ControllerSettings);
void process_c010_delay_queue();
bool init_c010_delay_queue(controllerIndex_t ControllerIndex);
void exit_c010_delay_queue();

#endif // ifdef USES_C010


/*********************************************************************************************\
* C011_queue_element for queueing requests for 011: Generic HTTP Advanced
\*********************************************************************************************/
#ifdef USES_C011
# include "../ControllerQueue/C011_queue_element.h"
//DEFINE_Cxxx_DELAY_QUEUE_MACRO(0, 11)
extern struct ControllerDelayHandlerStruct *C011_DelayHandler;
bool do_process_c011_delay_queue(int                       controller_number,
                                 const C011_queue_element& element,
                                 ControllerSettingsStruct& ControllerSettings);
void process_c011_delay_queue();
bool init_c011_delay_queue(controllerIndex_t ControllerIndex);
void exit_c011_delay_queue();

#endif // ifdef USES_C011


/*********************************************************************************************\
* C012_queue_element for queueing requests for 012: Blynk
* Using SimpleQueueElement_formatted_Strings
\*********************************************************************************************/
#ifdef USES_C012
# include "../ControllerQueue/SimpleQueueElement_formatted_Strings.h"
# define C012_queue_element SimpleQueueElement_formatted_Strings
//DEFINE_Cxxx_DELAY_QUEUE_MACRO(0, 12)
extern struct ControllerDelayHandlerStruct *C012_DelayHandler;
bool do_process_c012_delay_queue(int                       controller_number,
                                 const C012_queue_element& element,
                                 ControllerSettingsStruct& ControllerSettings);
void process_c012_delay_queue();
bool init_c012_delay_queue(controllerIndex_t ControllerIndex);
void exit_c012_delay_queue();

#endif // ifdef USES_C012

/*
 #ifdef USES_C013
   DEFINE_Cxxx_DELAY_QUEUE_MACRO(0, 13)
 #endif
 */

/*
 #ifdef USES_C014
   DEFINE_Cxxx_DELAY_QUEUE_MACRO(0, 14)
 #endif
 */


#ifdef USES_C015
# include "../ControllerQueue/C015_queue_element.h"
//DEFINE_Cxxx_DELAY_QUEUE_MACRO(0, 15)
extern struct ControllerDelayHandlerStruct *C015_DelayHandler;
bool do_process_c015_delay_queue(int                       controller_number,
                                 const C015_queue_element& element,
                                 ControllerSettingsStruct& ControllerSettings);
void process_c015_delay_queue();
bool init_c015_delay_queue(controllerIndex_t ControllerIndex);
void exit_c015_delay_queue();

#endif // ifdef USES_C015


#ifdef USES_C016
# include "../ControllerQueue/C016_queue_element.h"
//DEFINE_Cxxx_DELAY_QUEUE_MACRO(0, 16)
extern struct ControllerDelayHandlerStruct *C016_DelayHandler;
bool do_process_c016_delay_queue(int                       controller_number,
                                 const C016_queue_element& element,
                                 ControllerSettingsStruct& ControllerSettings);
void process_c016_delay_queue();
bool init_c016_delay_queue(controllerIndex_t ControllerIndex);
void exit_c016_delay_queue();

#endif // ifdef USES_C016


#ifdef USES_C017
# include "../ControllerQueue/SimpleQueueElement_formatted_Strings.h"
# define C017_queue_element SimpleQueueElement_formatted_Strings
//DEFINE_Cxxx_DELAY_QUEUE_MACRO(0, 17)
extern struct ControllerDelayHandlerStruct *C017_DelayHandler;
bool do_process_c017_delay_queue(int                       controller_number,
                                 const C017_queue_element& element,
                                 ControllerSettingsStruct& ControllerSettings);
void process_c017_delay_queue();
bool init_c017_delay_queue(controllerIndex_t ControllerIndex);
void exit_c017_delay_queue();

#endif // ifdef USES_C017

#ifdef USES_C018
# include "../ControllerQueue/C018_queue_element.h"
//DEFINE_Cxxx_DELAY_QUEUE_MACRO(0, 18)
extern struct ControllerDelayHandlerStruct *C018_DelayHandler;
bool do_process_c018_delay_queue(int                       controller_number,
                                 const C018_queue_element& element,
                                 ControllerSettingsStruct& ControllerSettings);
void process_c018_delay_queue();
bool init_c018_delay_queue(controllerIndex_t ControllerIndex);
void exit_c018_delay_queue();

#endif // ifdef USES_C018


/*
 #ifdef USES_C019
   DEFINE_Cxxx_DELAY_QUEUE_MACRO(0, 19)
 #endif
 */

/*
 #ifdef USES_C020
   DEFINE_Cxxx_DELAY_QUEUE_MACRO(0, 20)
 #endif
 */

/*
 #ifdef USES_C021
   DEFINE_Cxxx_DELAY_QUEUE_MACRO(0, 21)
 #endif
 */

/*
 #ifdef USES_C022
   DEFINE_Cxxx_DELAY_QUEUE_MACRO(0, 22)
 #endif
 */

/*
 #ifdef USES_C023
   DEFINE_Cxxx_DELAY_QUEUE_MACRO(0, 23)
 #endif
 */

/*
 #ifdef USES_C024
   DEFINE_Cxxx_DELAY_QUEUE_MACRO(0, 24)
 #endif
 */

/*
 #ifdef USES_C025
   DEFINE_Cxxx_DELAY_QUEUE_MACRO(0, 25)
 #endif
 */


// When extending this, search for EXTEND_CONTROLLER_IDS
// in the code to find all places that need to be updated too.


#endif // ifndef DELAY_QUEUE_ELEMENTS_H
