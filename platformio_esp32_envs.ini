;;; ESP32 test build ********************************************************************;
; Status of the ESP32 support is still considered "beta"                                 ;
; Most plugins work just fine on ESP32.                                                  ;
; Especially some plugins using serial may not run very well  (GPS does run fine).       ;
; ***************************************************************************************;

[esp32_always]
lib_ignore                = ESP8266WiFi, ESP8266Ping, ESP8266WebServer, ESP8266HTTPUpdateServer, ESP8266mDNS, ESPEasy_ESP8266Ping, RABurton ESP8266 Mutex, TinyWireM


[esp32_common]
extends                   = common, core_esp32_IDF4_4__2_0_2
lib_deps                  = td-er/ESPeasySerial @ 2.0.8, adafruit/Adafruit ILI9341 @ ^1.5.6, Adafruit GFX Library, LOLIN_EPD, Adafruit BusIO, VL53L0X @ 1.3.0, SparkFun VL53L1X 4m Laser Distance Sensor @ 1.2.9, td-er/SparkFun MAX1704x Fuel Gauge Arduino Library @ ^1.0.1, ArduinoOTA, ESP32HTTPUpdateServer, FrogmoreScd30, Multi Channel Relay Arduino Library
lib_ignore                = ${esp32_always.lib_ignore}, ESP32_ping, IRremoteESP8266, HeatpumpIR, ESP32 BLE Arduino
extra_scripts             = post:tools/pio/post_esp32.py
                            ${extra_scripts_default.extra_scripts}
build_unflags             = -Wall
build_flags               = ${core_esp32_IDF4_4__2_0_2.build_flags}
                            ${mqtt_flags.build_flags}
                            -DCONFIG_FREERTOS_ASSERT_DISABLE
                            -DCONFIG_LWIP_ESP_GRATUITOUS_ARP
                            -fno-strict-aliasing
                            -DCORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_NONE
monitor_filters           = esp32_exception_decoder

[esp32_common_LittleFS]
extends                   = esp32_common
build_flags               = ${esp32_common.build_flags}
                            -DUSE_LITTLEFS
lib_deps                  = ${esp32_common.lib_deps}, LittleFS
board_build.filesystem    = littlefs


[esp32s2_common]
extends                   = esp32_common
build_flags               = ${esp32_common.build_flags}
                            -DESP32S2
                            -DBOARD_HAS_PSRAM
                            -DESP32_ENABLE_PSRAM
                            -DFEATURE_ARDUINO_OTA

[esp32s2_common_LittleFS]
extends                   = esp32s2_common
build_flags               = ${esp32s2_common.build_flags}
                            -DUSE_LITTLEFS
lib_deps                  = ${esp32s2_common.lib_deps}, LittleFS
board_build.filesystem    = littlefs




; Custom: 4096k version --------------------------
[env:custom_ESP32_4M316k]
extends                   = esp32_common
board                     = esp32_4M
build_flags               = ${esp32_common.build_flags}
                            -DPLUGIN_BUILD_CUSTOM
extra_scripts             = ${esp32_common.extra_scripts}
                            pre:tools/pio/pre_custom_esp32.py

[env:custom_ESP32_4M316k_LittleFS]
extends                   = esp32_common_LittleFS
board                     = esp32_4M
build_flags               = ${esp32_common_LittleFS.build_flags}
                            -DPLUGIN_BUILD_CUSTOM
extra_scripts             = ${esp32_common_LittleFS.extra_scripts}
                            pre:tools/pio/pre_custom_esp32.py

[env:custom_ESP32_16M8M_LittleFS]
extends                   = esp32_common_LittleFS
board                     = esp32_16M8M
build_flags               = ${esp32_common_LittleFS.build_flags}
                            -DPLUGIN_BUILD_CUSTOM
extra_scripts             = ${esp32_common_LittleFS.extra_scripts}
                            pre:tools/pio/pre_custom_esp32.py

[env:custom_IR_ESP32_4M316k]
extends                   = esp32_common
board                     = esp32_4M
build_flags               = ${esp32_common.build_flags}
                            -DPLUGIN_BUILD_CUSTOM
                            -DPLUGIN_BUILD_IR
lib_ignore                = ${esp32_always.lib_ignore}, ESP32_ping, HeatpumpIR
extra_scripts             = ${esp32_common.extra_scripts}
                            pre:tools/pio/pre_custom_esp32.py


; ESP32-S2
[env:custom_ESP32s2_4M316k]
extends                   = esp32s2_common
board                     = esp32s2
build_flags               = ${esp32s2_common.build_flags} 
                            -DPLUGIN_BUILD_CUSTOM
extra_scripts             = ${esp32s2_common.extra_scripts}
                            pre:tools/pio/pre_custom_esp32.py


[env:custom_IR_ESP32s2_4M316k]
extends                   = esp32s2_common
board                     = esp32s2
build_flags               = ${esp32s2_common.build_flags}
                            -DPLUGIN_BUILD_CUSTOM
                            -DPLUGIN_BUILD_IR
lib_ignore                = ${esp32_always.lib_ignore}, ESP32_ping, HeatpumpIR
extra_scripts             = ${esp32s2_common.extra_scripts}
                            pre:tools/pio/pre_custom_esp32.py



; Normal: 4096k version --------------------------
[env:normal_ESP32_4M316k]
extends                   = esp32_common
board                     = esp32_4M
lib_deps                  = ${esp32_common.lib_deps}, ServoESP32


[env:normal_ESP32_4M316k_LittleFS]
extends                   = esp32_common_LittleFS
board                     = esp32_4M
lib_deps                  = ${esp32_common_LittleFS.lib_deps}, ServoESP32


[env:normal_ESP32_16M8M_LittleFS]
extends                   = esp32_common_LittleFS
board                     = esp32_16M8M
lib_deps                  = ${esp32_common_LittleFS.lib_deps}, ServoESP32


; ESP32-S2
[env:normal_ESP32s2_4M316k_LittleFS]
extends                   = esp32s2_common_LittleFS
board                     = esp32s2




; Test A....E builds --------------------------
[env:test_A_ESP32_4M316k]
extends                   = esp32_common
board                     = esp32_4M
build_flags               = ${esp32_common.build_flags}  
                            -DFEATURE_ARDUINO_OTA
                            -DPLUGIN_SET_TEST_ESP32
                            -DTESTING_USE_RTTTL

[env:test_B_ESP32_4M316k]
extends                   = esp32_common
board                     = esp32_4M
build_flags               = ${esp32_common.build_flags}  
                            -DFEATURE_ARDUINO_OTA
                            -DPLUGIN_SET_TEST_B_ESP32
                            -DTESTING_USE_RTTTL

[env:test_C_ESP32_4M316k]
extends                   = esp32_common
board                     = esp32_4M
build_flags               = ${esp32_common.build_flags}  
                            -DFEATURE_ARDUINO_OTA
                            -DPLUGIN_SET_TEST_C_ESP32
                            -DTESTING_USE_RTTTL

[env:test_D_ESP32_4M316k]
extends                   = esp32_common
board                     = esp32_4M
build_flags               = ${esp32_common.build_flags}  
                            -DFEATURE_ARDUINO_OTA
                            -DPLUGIN_SET_TEST_D_ESP32
                            -DTESTING_USE_RTTTL


[env:test_A_ESP32_IRExt_4M316k]
extends                   = test_A_ESP32_4M316k
board                     = esp32_4M
lib_ignore                = AS_BH1750, ${esp32_always.lib_ignore}, ESP32_ping
build_flags               = ${esp32_common.build_flags}
                            -DPLUGIN_BUILD_NORMAL_IRext
                            -DTESTING_USE_RTTTL

[env:test_B_ESP32_IRExt_4M316k]
extends                   = test_B_ESP32_4M316k
board                     = esp32_4M
lib_ignore                = AS_BH1750, ${esp32_always.lib_ignore}, ESP32_ping
build_flags               = ${esp32_common.build_flags}
                            -DPLUGIN_BUILD_NORMAL_IRext
                            -DTESTING_USE_RTTTL

[env:test_C_ESP32_IRExt_4M316k]
extends                   = test_C_ESP32_4M316k
board                     = esp32_4M
lib_ignore                = AS_BH1750, ${esp32_always.lib_ignore}, ESP32_ping
build_flags               = ${esp32_common.build_flags}
                            -DPLUGIN_BUILD_NORMAL_IRext
                            -DTESTING_USE_RTTTL

[env:test_D_ESP32_IRExt_4M316k]
extends                   = test_D_ESP32_4M316k
board                     = esp32_4M
lib_ignore                = AS_BH1750, ${esp32_always.lib_ignore}, ESP32_ping
build_flags               = ${esp32_common.build_flags}
                            -DPLUGIN_BUILD_NORMAL_IRext
                            -DTESTING_USE_RTTTL

[env:energy_ESP32_4M316k]
extends                   = esp32_common
board                     = esp32_4M
lib_deps                  = ${esp32_common.lib_deps}, ServoESP32
build_flags               = ${esp32_common.build_flags}  
                            -DFEATURE_ARDUINO_OTA
                            -D PLUGIN_ENERGY_COLLECTION

[env:display_ESP32_4M316k]
extends                   = esp32_common
board                     = esp32_4M
lib_deps                  = ${esp32_common.lib_deps}, ServoESP32
build_flags               = ${esp32_common.build_flags}  
                            -DFEATURE_ARDUINO_OTA



; ETH builds --------------------------
[env:custom_ESP32_4M316k_ETH]
extends                   = custom_ESP32_4M316k
board                     = esp32_4M
platform                  = ${custom_ESP32_4M316k.platform}
build_flags               = ${custom_ESP32_4M316k.build_flags} -DHAS_ETHERNET

[env:normal_ESP32_4M316k_ETH]
extends                   = normal_ESP32_4M316k
board                     = esp32_4M
platform                  = ${normal_ESP32_4M316k.platform}
build_flags               = ${normal_ESP32_4M316k.build_flags} -DHAS_ETHERNET

[env:test_A_ESP32_4M316k_ETH]
extends                   = test_A_ESP32_4M316k
board                     = esp32_4M
platform                  = ${test_A_ESP32_4M316k.platform}
build_flags               = ${test_A_ESP32_4M316k.build_flags} -DHAS_ETHERNET
                            -DTESTING_USE_RTTTL

[env:test_B_ESP32_4M316k_ETH]
extends                   = test_B_ESP32_4M316k
board                     = esp32_4M
platform                  = ${test_B_ESP32_4M316k.platform}
build_flags               = ${test_B_ESP32_4M316k.build_flags} -DHAS_ETHERNET
                            -DTESTING_USE_RTTTL

[env:test_C_ESP32_4M316k_ETH]
extends                   = test_C_ESP32_4M316k
board                     = esp32_4M
platform                  = ${test_C_ESP32_4M316k.platform}
build_flags               = ${test_C_ESP32_4M316k.build_flags} -DHAS_ETHERNET
                            -DTESTING_USE_RTTTL

[env:test_D_ESP32_4M316k_ETH]
extends                   = test_D_ESP32_4M316k
board                     = esp32_4M
platform                  = ${test_D_ESP32_4M316k.platform}
build_flags               = ${test_D_ESP32_4M316k.build_flags} -DHAS_ETHERNET
                            -DTESTING_USE_RTTTL



;;; ESP32-s2 ***********************************************************

[env:normal_ESP32s2_4M316k]
extends                   = esp32s2_common
board                     = esp32s2
lib_deps                  = ${esp32s2_common.lib_deps}, ServoESP32

[env:test_A_ESP32s2_4M316k]
extends                   = esp32s2_common
board                     = esp32s2
build_flags               = ${esp32s2_common.build_flags}  
                            -DPLUGIN_SET_TEST_ESP32
                            -DTESTING_USE_RTTTL

[env:test_B_ESP32s2_4M316k]
extends                   = esp32s2_common
board                     = esp32s2
build_flags               = ${esp32s2_common.build_flags}  
                            -DPLUGIN_SET_TEST_B_ESP32
                            -DTESTING_USE_RTTTL

[env:test_C_ESP32s2_4M316k]
extends                   = esp32s2_common
board                     = esp32s2
build_flags               = ${esp32s2_common.build_flags}  
                            -DPLUGIN_SET_TEST_C_ESP32
                            -DTESTING_USE_RTTTL

[env:test_D_ESP32s2_4M316k]
extends                   = esp32s2_common
board                     = esp32s2
build_flags               = ${esp32s2_common.build_flags}  
                            -DPLUGIN_SET_TEST_D_ESP32
                            -DTESTING_USE_RTTTL


[env:energy_ESP32s2_4M316k]
extends                   = esp32s2_common
board                     = esp32s2
lib_deps                  = ${esp32s2_common.lib_deps}, ServoESP32
build_flags               = ${esp32s2_common.build_flags}  
                            -D PLUGIN_ENERGY_COLLECTION

[env:display_ESP32s2_4M316k]
extends                   = esp32s2_common
board                     = esp32s2
lib_deps                  = ${esp32s2_common.lib_deps}, ServoESP32
build_flags               = ${esp32s2_common.build_flags}  
                            -D PLUGIN_DISPLAY_COLLECTION





;;; ESP32 MAX builds 16M flash ------------------------------

; A Lolin D32 PRO with 16MB Flash, allowing 4MB sketch size, and file storage using the default (SPIFFS) filesystem
[env:max_ESP32_16M1M]
extends                   = esp32_common
board                     = esp32_16M1M
lib_ignore                = ${esp32_always.lib_ignore}, ESP32_ping
lib_deps                  = ${esp32_common.lib_deps}, VL53L0X
build_flags               = ${esp32_common.build_flags}  
                            -DFEATURE_ARDUINO_OTA
                            -DPLUGIN_BUILD_MAX_ESP32
                            -DPLUGIN_BUILD_IR_EXTENDED
; TODO: To enable PS-RAM Support needs more build flags than these 2, for now define ESP32_ENABLE_PSRAM is used to en/disable detecting PS-Ram size on Info page
;                            -DBOARD_HAS_PSRAM // both flags already enabled for Lolin D32 Pro board by PlatformIO
;                            -mfix-esp32-psram-cache-issue


; A Lolin D32 PRO with 16MB Flash, allowing 4MB sketch size, and file storage using LittleFS filesystem
[env:max_ESP32_16M8M_LittleFS]
extends                   = esp32_common_LittleFS
board                     = esp32_16M8M
lib_ignore                = ${esp32_always.lib_ignore}, ESP32_ping
lib_deps                  = ${esp32_common_LittleFS.lib_deps}, VL53L0X
build_flags               = ${esp32_common_LittleFS.build_flags}  
                            -DFEATURE_ARDUINO_OTA
                            -DPLUGIN_BUILD_MAX_ESP32
                            -DPLUGIN_BUILD_IR_EXTENDED
; TODO: To enable PS-RAM Support needs more build flags than these 2, for now define ESP32_ENABLE_PSRAM is used to en/disable detecting PS-Ram size on Info page
;                            -DBOARD_HAS_PSRAM // both flags already enabled for Lolin D32 Pro board by PlatformIO
;                            -mfix-esp32-psram-cache-issue


; If you have a board with Ethernet integrated and 16MB Flash, then this configuration could be enabled, it's based on the max_ESP32_16M8M_LittleFS definition
[env:max_ESP32_16M8M_LittleFS_ETH]
extends                   = max_ESP32_16M8M_LittleFS
build_flags               = ${max_ESP32_16M8M_LittleFS.build_flags} -DHAS_ETHERNET









