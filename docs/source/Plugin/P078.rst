.. include:: ../Plugin/_plugin_substitutions_p07x.repl
.. _P078_page:

|P078_typename|
==================================================

|P078_shortinfo|

Plugin details
--------------

Type: |P078_type|

Port Type: |P078_porttype|

Name: |P078_name|

Status: |P078_status|

GitHub: |P078_github|_

Maintainer: |P078_maintainer|

Used libraries: |P078_usedlibraries|

Supported hardware
------------------

|P078_usedby|

Introduction
------------

Eastron is the manufacturer of many energy meters.
These can be had in various form factors, from DIN rail modules to panel meters.
There are many variations in number of phases, direct metering or using current transformer clamps (``CT`` in the name).

Apart from all these differences in features, there are also variations in interfacing to read the meter.
The ESPEasy plugin for these meters only can interact with them using Modbus RTU.

This Modbus RTU protocol uses the half-duplex RS485 serial interface.


RS485 Modbus Interface
----------------------

RS485 allows to 'daisy chain' various meters on to the same bus over long distances. (upto 1200 m).

Interfacing RS485 devices with an ESP module requires some chip to convert typical serial signals to the differential signal required for RS485 devices.
Commonly used chips are the MAX485 or ADM483, but there are lots of other variants which can also be used.

Typically such a chip has a data input (``DI`` or ``D``) and data output (``RO`` or ``R``).
To toggle between sending and listening, the ``DE`` pin must be pulled 'high' when sending data.

The ``/RE`` pin is logically inverted and thus can be connected to the ``DE`` pin.
This allows for a single GPIO pin to be used to toggle between sending and receiving data.

.. note:: 
  Most RS485 transceiver chips, like the MAX485, allow for a supply voltage (for the chip) higher than the 3.3V used for the ESP.
  Keep in mind that the ``RO`` signal level will be close to the supplied voltage.
  Meaning when you connect this chip to 5V, the signal connected to the RX pin on the ESP should be converted down to the lower 3.3V levels the ESP board uses.


Manual switching of transmitter/receiver without collision detection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The most commonly used schematic for connecting a RS485 transceiver chip to a microcontroller, like the ESP boards:


.. code-block::

          VCC ---------------+
                             |
                     +-------x-------+
          RXD <------| RO            |
                     |              B|-----------<> B
          TXD ------>| DI   ADM483   |
  ESP                |               |     RS485 bus side
          RTS --+--->| DE            |
                |    |              A|-----------<> A
                +----| /RE           |
                     +-------x-------+
                             |
                            GND


Collision detection circuit
^^^^^^^^^^^^^^^^^^^^^^^^^^^

By connecting the ``/RE`` pin to GND, the transceiver chip has "receiving" enabled even when sending.
This allows to detect "collision", when other devices are sending data when the ESP attempts to send data.

If there is only a single 'master' on the RS485 bus, there is no need for using this kind of setup.

.. note:: Only ESP32 (and variants) can handle collision detection on RS485.

.. code-block::

          VCC ---------------+
                             |
                     +-------x-------+
          RXD <------| R             |
                     |              B|----------<> B
          TXD ------>| D    ADM483   |
  ESP32              |               |     RS485 bus side
          RTS ------>| DE            |
                     |              A|----------<> A
                +----| /RE           |
                |    +-------x-------+
                |            |
               GND          GND

Wiring RS485 bus
^^^^^^^^^^^^^^^^

The RS485 bus transports a differential signal to all connected modules.

There is some debate about whether the GND should also be connected, since the ``A`` and ``B`` line carry all what is needed.
When there is no common GND among modules and the ESP board, the voltage on both A and B might be too high compared to the module's GND, which may cause damage to the module.
So when possible, also wire the GND between modules and the GND of the RS485 transceiver chip.

It is best to twist the A/B lines when using longer wires to reduce effects of noise.

All modules on the same bus must be daisy chained from one to the other. 
A star topology is not allowed.

Most MAX485 modules already have a 120 Ohm resistor over the A/B pins.
It is adviced to add another 120 Ohm resistor over the A/B connector of the last module on the bus to act as a 'terminator', to reduce signal reflections.
For short links, a second 120 Ohm resistor is almost never needed, especially given the rather low baud rate used by these modules.


Configuration
-------------

See: :ref:`SerialHelper_page`

.. note:: All Eastron modules on the same ESPEasy node must use the same serial settings, like baud rate and serial port config.


Set Baudrate/ID
^^^^^^^^^^^^^^^

The default baud rate of 2400 of most of these sensors may be too low for using Software Serial.
On ESP8266, the module may rather frequently crash due to watch dog resets when running Software Serial at such low baud rates.

It is adviced to set the module to 9600 baud.

Using a higher baud rate will also take less resources of the ESPEasy node.
For example, writing the 8 byte command to the module takes roughly 35 msec @2400 baud and only 13 msec @9600 baud.

When running at 9600 baud, ESPEasy can typically read upto 10 registers per second for all connected Eastron modules.

On some modules, like the SDM120, the module settings can only be set via the Modbus interface.

When an Eastron task is enabled in ESPEasy, it will continously read the set registers on all connected Eastron modules.
This will affect the commands used to change settings and thus this continous reading must be paused.

The commands in ESPEasy to change settings have a last optional parameter ``node_id``, which is the current set address of the module.
If none is given, the factory default address ``1`` is assumed.
Valid node IDs are ``1 ... 247``.

Steps to change settings:

* Pause continously reading registers on the module by calling ``Eastron,Pause`` in ESPEasy.
* Enable ``-set-`` mode on the module by pressing the button on the module for 3 seconds.
* To change the baud rate, call ``Eastron,SetBaud,<new_baudrate>[,<node_id>]`` in ESPEasy, where the new baud rate parameter can be given either as a value ``0`` ... ``5``, or the exact (supported) baud rate. (see description below).
* To change the node ID (address), call ``Eastron,SetID,<new_id>[,<node_id>]``.
* Press the button on the module again for 3 seconds to save the new values.
* Reading the set registers can be resumed with the command ``Eastron,Resume``

Since changing the node ID is effective immediately, it makes sense to change the baud rate first and then the ID if both need to be changed.

.. note:: The new baud rate will only be used after a power cycle of the module.




Sensor
------



Commands available
------------------

.. include:: P078_commands.repl

.. Events
.. ~~~~~~

.. .. include:: P078_events.repl

Change log
----------

.. versionchanged:: 2.0
  ...

  |added| 2023-08-06: 
  * Add support for many more modules
  * Add commands to set ID and baud rate
  * Massively reduce use of resources when reading sensor

.. versionadded:: 1.0
  ...

  |added|
  Initial release version.





